#version 450
#extension GL_ARB_separate_shader_objects : enable
#extension GL_EXT_buffer_reference : require

layout(local_size_x_id = 0) in;
layout(local_size_y_id = 1) in;
layout(local_size_z_id = 2) in;
layout(constant_id = 3) const int WIDTH = 640;
layout(constant_id = 4) const int HEIGHT = 480;

struct Pixel
{
	vec4 value;
};

layout(buffer_reference, std430, buffer_reference_align=4) buffer OutputBuffer
{
	Pixel imageData[];
};

layout(std430, push_constant) uniform PushConstants
{
	OutputBuffer BDA;
} pushconstants;

void main()
{
	// In order to fit the work into workgroups, some unnecessary threads are launched.
	// We terminate those threads here. 
	if (gl_GlobalInvocationID.x >= WIDTH || gl_GlobalInvocationID.y >= HEIGHT) return;

	float x = float(gl_GlobalInvocationID.x) / float(WIDTH);
	float y = float(gl_GlobalInvocationID.y) / float(HEIGHT);

	vec2 uv = vec2(x, y);
	float n = 0.0;
	vec2 c = vec2(-.445, 0.0) +  (uv - 0.5)*(2.0 + 1.7 * 0.2), 
	z = vec2(0.0);
	const int M = 128;
	for (int i = 0; i < M; i++)
	{
		z = vec2(z.x * z.x - z.y * z.y, 2. * z.x * z.y) + c;
		if (dot(z, z) > 4) break;
		n++;
	}
          
	// we use a simple cosine palette to determine color:
	// http://iquilezles.org/www/articles/palettes/palettes.htm         
	float t = float(n) / float(M);
	vec3 d = vec3(0.3, 0.3 ,0.5);
	vec3 e = vec3(-0.2, -0.3 ,-0.5);
	vec3 f = vec3(2.1, 2.0, 3.0);
	vec3 g = vec3(0.0, 0.1, 0.0);
	vec4 color = vec4(d + e * cos(6.28318*(f * t + g)), 1.0);

	// store the rendered mandelbrot set into a storage buffer:
	pushconstants.BDA.imageData[WIDTH * gl_GlobalInvocationID.y + gl_GlobalInvocationID.x].value = color;
}
