#version 450
#extension GL_ARB_separate_shader_objects : enable
#extension GL_EXT_buffer_reference : require
#extension GL_EXT_buffer_reference_uvec2 : require

layout(local_size_x_id = 0) in;
layout(local_size_y_id = 1) in;
layout(local_size_z_id = 2) in;
layout(constant_id = 3) const int WIDTH = 640;
layout(constant_id = 4) const int HEIGHT = 480;
layout(constant_id = 5) const uint numPixelsPerBuffer = 307200;

struct InterleaveData
{
	uvec2 color;
	uvec2 address;
};

layout(buffer_reference, std430, buffer_reference_align=8) readonly buffer InterleaveBuffer
{
	InterleaveData interleave[];
};

layout(buffer_reference, std430, buffer_reference_align=8) buffer OutputBuffer
{
	uvec2 value;
};

layout(std430, push_constant) uniform PushConstants
{
	InterleaveBuffer interleaveBDA;
} pushconstants;

void main()
{
	// In order to fit the work into workgroups, some unnecessary threads are launched.
	// We terminate those threads here. 
	if (gl_GlobalInvocationID.x >= WIDTH || gl_GlobalInvocationID.y >= HEIGHT) return;

	uint pixelIndex = gl_GlobalInvocationID.y * WIDTH + gl_GlobalInvocationID.x;

	uvec2 color = pushconstants.interleaveBDA.interleave[pixelIndex].color;
	uvec2 address = pushconstants.interleaveBDA.interleave[pixelIndex].address;

	OutputBuffer buf = OutputBuffer(address);
	buf.value = color;
}
