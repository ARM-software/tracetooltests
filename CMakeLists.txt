cmake_minimum_required(VERSION 3.14)
set(CMAKE_CXX_STANDARD 11)
set(CMAKE_CXX_STANDARD_REQUIRED YES)
enable_testing()
project(tracetooltests)

set(WINDOWSYSTEM "fbdev" CACHE STRING "Window system to use for build")
set_property(CACHE WINDOWSYSTEM PROPERTY STRINGS fbdev sdl pbuffer x11)

if(WINDOWSYSTEM MATCHES "sdl")
	find_package(SDL2 REQUIRED)
	include_directories(${SDL2_INCLUDE_DIRS})
	set(IT_LIBS ${SDL2_LIBRARIES})
	set(IT_DEFINES "SDL")
	message(STATUS "Building for SDL2")
elseif (WINDOWSYSTEM MATCHES "fbdev")
	set(IT_DEFINES "FBDEV")
	message(STATUS "Building for fbdev")
elseif (WINDOWSYSTEM MATCHES "x11" OR WINDOWSYSTEM MATCHES "X11")
	set(IT_DEFINES "X11")
	find_package(X11 REQUIRED)
	include_directories(${X11_INCLUDE_DIR})
	set(IT_LIBS ${X11_X11_LIB})
	message(STATUS "Building for X11")
elseif (WINDOWSYSTEM MATCHES "pbuffers")
	set(IT_DEFINES "PBUFFERS")
	message(STATUS "Building for pbuffers")
else()
	message(FATAL_ERROR "Invalid window system: ${WINDOWSYSTEM}")
endif()
set(IT_CFLAGS "-std=c++11 -Wall -g")

if (SANITIZE)
	# before running test with sanitizer, recommend to run these two:
	# export LSAN_OPTIONS='detect_leaks=0'
	# export ASAN_OPTIONS='symbolize=1,abort_on_error=1'
	set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -fstack-protector-all -fsanitize=${SANITIZE} -fsanitize-undefined-trap-on-error -fuse-ld=gold")
	set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fstack-protector-all -fsanitize=${SANITIZE} -fsanitize-undefined-trap-on-error -fuse-ld=gold")
endif()

function(gles_test test_name)
	add_executable(gles_${ARGV0} src/gles_${ARGV0}.cpp src/gles_common.cpp src/gles_common.h src/util.cpp src/util.h)
	target_link_libraries(gles_${ARGV0} PRIVATE EGL GLESv2 pthread ${IT_LIBS})
	target_compile_definitions(gles_${ARGV0} PUBLIC ${IT_DEFINES})
	set_target_properties(gles_${ARGV0} PROPERTIES COMPILE_FLAGS ${IT_CFLAGS})
	install(TARGETS gles_${ARGV0} DESTINATION tests)
	add_test(NAME gles_test_${ARGV0} COMMAND ${CMAKE_CURRENT_BINARY_DIR}/gles_${ARGV0})
endfunction()

function(vulkan_test test_name)
	add_executable(vulkan_${ARGV0} src/vulkan_${ARGV0}.cpp src/vulkan_common.cpp src/vulkan_common.h src/util.cpp src/util.h)
	target_link_libraries(vulkan_${ARGV0} PRIVATE vulkan pthread ${IT_LIBS})
	target_compile_definitions(vulkan_${ARGV0} PUBLIC ${IT_DEFINES})
	set_target_properties(vulkan_${ARGV0} PROPERTIES COMPILE_FLAGS ${IT_CFLAGS})
	install(TARGETS vulkan_${ARGV0} DESTINATION tests)
	add_test(NAME vulkan_test_${ARGV0} COMMAND ${CMAKE_CURRENT_BINARY_DIR}/vulkan_${ARGV0})
endfunction()

if (NOT NO_GLES MATCHES "1")
gles_test(dummy_1)
gles_test(multisurface_1)
gles_test(multithread_1)
gles_test(multithread_2)
gles_test(multithread_3)
gles_test(bindbufferrange_1)
gles_test(compute_1)
gles_test(compute_2)
gles_test(compute_3)
gles_test(programs_1)
gles_test(imagetex_1)
gles_test(indirectdraw_1)
gles_test(indirectdraw_2)
gles_test(drawrange_1)
gles_test(drawrange_2)
gles_test(draw_1)
gles_test(draw_2)
gles_test(multisample_1)
gles_test(vertexbuffer_1)
gles_test(khr_debug)
gles_test(extension_pack_es31a)
gles_test(copy_image_1)
gles_test(geometry_shader_1)
gles_test(khr_blend_equation_advanced)
gles_test(oes_sample_shading)
gles_test(ext_texture_border_clamp)
gles_test(oes_texture_stencil8)
gles_test(ext_gpu_shader5)
gles_test(ext_texture_sRGB_decode)
gles_test(ext_texture_buffer)
gles_test(ext_texture_cube_map_array)
gles_test(uninit_texture_1)
gles_test(uninit_texture_2)
endif()

if (NOT NO_VULKAN MATCHES "1")
vulkan_test(copying_1)
add_test(NAME vulkan_copying_1_test_0_0 COMMAND ${CMAKE_CURRENT_BINARY_DIR}/vulkan_copying_1 -q 0 -m 0)
add_test(NAME vulkan_copying_1_test_1_0 COMMAND ${CMAKE_CURRENT_BINARY_DIR}/vulkan_copying_1 -q 1 -m 0 -c 5)
add_test(NAME vulkan_copying_1_test_2_0 COMMAND ${CMAKE_CURRENT_BINARY_DIR}/vulkan_copying_1 -q 2 -m 0)
add_test(NAME vulkan_copying_1_test_3_0 COMMAND ${CMAKE_CURRENT_BINARY_DIR}/vulkan_copying_1 -q 3 -m 0)
add_test(NAME vulkan_copying_1_test_4_0 COMMAND ${CMAKE_CURRENT_BINARY_DIR}/vulkan_copying_1 -q 4 -m 0)
add_test(NAME vulkan_copying_1_test_0_1 COMMAND ${CMAKE_CURRENT_BINARY_DIR}/vulkan_copying_1 -q 0 -m 1 -c 7)
add_test(NAME vulkan_copying_1_test_0_2 COMMAND ${CMAKE_CURRENT_BINARY_DIR}/vulkan_copying_1 -q 0 -m 0 -f 1)
add_test(NAME vulkan_copying_1_test_0_3 COMMAND ${CMAKE_CURRENT_BINARY_DIR}/vulkan_copying_1 -q 0 -m 2)
add_test(NAME vulkan_copying_1_test_1_1 COMMAND ${CMAKE_CURRENT_BINARY_DIR}/vulkan_copying_1 -q 1 -m 1)
add_test(NAME vulkan_copying_1_test_2_1 COMMAND ${CMAKE_CURRENT_BINARY_DIR}/vulkan_copying_1 -q 2 -m 1)
add_test(NAME vulkan_copying_1_test_3_1 COMMAND ${CMAKE_CURRENT_BINARY_DIR}/vulkan_copying_1 -q 3 -m 1)
add_test(NAME vulkan_copying_1_test_4_1 COMMAND ${CMAKE_CURRENT_BINARY_DIR}/vulkan_copying_1 -q 4 -m 1)
add_test(NAME vulkan_copying_1_test_1_2 COMMAND ${CMAKE_CURRENT_BINARY_DIR}/vulkan_copying_1 -q 1 -m 2)
add_test(NAME vulkan_copying_1_test_2_2 COMMAND ${CMAKE_CURRENT_BINARY_DIR}/vulkan_copying_1 -q 2 -m 2)
add_test(NAME vulkan_copying_1_test_3_2 COMMAND ${CMAKE_CURRENT_BINARY_DIR}/vulkan_copying_1 -q 3 -m 2)
add_test(NAME vulkan_copying_1_test_4_2 COMMAND ${CMAKE_CURRENT_BINARY_DIR}/vulkan_copying_1 -q 4 -m 2 -b 1000)
add_test(NAME vulkan_copying_1_test_5_2 COMMAND ${CMAKE_CURRENT_BINARY_DIR}/vulkan_copying_1 -q 5 -m 1 -b 1000)

vulkan_test(thread_1)
vulkan_test(thread_2)
vulkan_test(memory_1)
vulkan_test(as_1)

vulkan_test(copying_2)
add_test(NAME vulkan_copying_2_test_0_0_0 COMMAND ${CMAKE_CURRENT_BINARY_DIR}/vulkan_copying_2 -q 0 -f 0 -m 0 -t 3)
add_test(NAME vulkan_copying_2_test_0_0_1 COMMAND ${CMAKE_CURRENT_BINARY_DIR}/vulkan_copying_2 -q 0 -f 0 -m 1 -t 3)
add_test(NAME vulkan_copying_2_test_0_0_2 COMMAND ${CMAKE_CURRENT_BINARY_DIR}/vulkan_copying_2 -q 0 -f 0 -m 2 -t 3)
add_test(NAME vulkan_copying_2_test_0_1_0 COMMAND ${CMAKE_CURRENT_BINARY_DIR}/vulkan_copying_2 -q 0 -f 1 -m 0 -t 3)
add_test(NAME vulkan_copying_2_test_1_0_0 COMMAND ${CMAKE_CURRENT_BINARY_DIR}/vulkan_copying_2 -q 1 -f 0 -m 0 -t 3)
add_test(NAME vulkan_copying_2_test_1_1_0 COMMAND ${CMAKE_CURRENT_BINARY_DIR}/vulkan_copying_2 -q 1 -f 1 -m 0 -t 3)
add_test(NAME vulkan_copying_2_test_1_1_1 COMMAND ${CMAKE_CURRENT_BINARY_DIR}/vulkan_copying_2 -q 1 -f 1 -m 1 -c 5 -t 3)
add_test(NAME vulkan_copying_2_test_1_1_2 COMMAND ${CMAKE_CURRENT_BINARY_DIR}/vulkan_copying_2 -q 1 -f 1 -m 2 -b 1000 -t 3)

vulkan_test(copying_3)
add_test(NAME vulkan_copying_3_test_0 COMMAND ${CMAKE_CURRENT_BINARY_DIR}/vulkan_copying_3 -c 0 -t 3)
add_test(NAME vulkan_copying_3_test_1 COMMAND ${CMAKE_CURRENT_BINARY_DIR}/vulkan_copying_3 -c 1 -t 3)
add_test(NAME vulkan_copying_3_test_2 COMMAND ${CMAKE_CURRENT_BINARY_DIR}/vulkan_copying_3 -c 2 -t 3)
endif()
